// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`EmbedBlock no data 1`] = `
<MediaBlock
  block={
    Immutable.Record {
      "key": "",
      "type": "unstyled",
      "text": "",
      "characterList": Immutable.List [],
      "depth": 0,
      "data": Immutable.Map {},
    }
  }
  blockProps={
    Object {
      "editorState": EditorState {
        "_immutable": Immutable.Record {
          "allowUndo": true,
          "currentContent": Immutable.Record {
            "entityMap": Object {
              "__add": [Function],
              "__create": [Function],
              "__get": [Function],
              "__getLastCreatedEntityKey": [Function],
              "__mergeData": [Function],
              "__replaceData": [Function],
              "add": [Function],
              "create": [Function],
              "get": [Function],
              "getLastCreatedEntityKey": [Function],
              "mergeData": [Function],
              "replaceData": [Function],
            },
            "blockMap": Immutable.OrderedMap {
              "5h4sv": Immutable.Record {
                "key": "5h4sv",
                "type": "unstyled",
                "text": "",
                "characterList": Immutable.List [],
                "depth": 0,
                "data": Immutable.Map {},
              },
            },
            "selectionBefore": Immutable.Record {
              "anchorKey": "5h4sv",
              "anchorOffset": 0,
              "focusKey": "5h4sv",
              "focusOffset": 0,
              "isBackward": false,
              "hasFocus": false,
            },
            "selectionAfter": Immutable.Record {
              "anchorKey": "5h4sv",
              "anchorOffset": 0,
              "focusKey": "5h4sv",
              "focusOffset": 0,
              "isBackward": false,
              "hasFocus": false,
            },
          },
          "decorator": null,
          "directionMap": Immutable.OrderedMap {
            "5h4sv": "LTR",
          },
          "forceSelection": false,
          "inCompositionMode": false,
          "inlineStyleOverride": null,
          "lastChangeType": null,
          "nativelyRenderedContent": null,
          "redoStack": Immutable.Stack [],
          "selection": Immutable.Record {
            "anchorKey": "5h4sv",
            "anchorOffset": 0,
            "focusKey": "5h4sv",
            "focusOffset": 0,
            "isBackward": false,
            "hasFocus": false,
          },
          "treeMap": Immutable.OrderedMap {
            "5h4sv": Immutable.List [
              Immutable.Record {
                "start": 0,
                "end": 0,
                "decoratorKey": null,
                "leaves": Immutable.List [
                  Immutable.Record {
                    "start": 0,
                    "end": 0,
                  },
                ],
              },
            ],
          },
          "undoStack": Immutable.Stack [],
        },
      },
      "entity": Object {
        "getData": [Function],
        "getMutability": [Function],
        "getType": [Function],
      },
      "entityKey": "string",
      "entityType": Object {
        "description": "test",
        "icon": "test",
      },
      "lockEditor": [Function],
      "onChange": [Function],
      "onEditEntity": [Function],
      "onRemoveEntity": [Function],
      "textDirectionality": "RTL",
      "unlockEditor": [Function],
    }
  }
  isLoading={true}
>
  <a
    className="EmbedBlock__link"
    rel="noopener noreferrer"
    target="_blank"
  />
  <button
    className="Tooltip__button"
    onClick={[Function]}
    type="button"
  >
    Edit
  </button>
  <button
    className="Tooltip__button"
    onClick={[Function]}
    type="button"
  >
    Remove
  </button>
</MediaBlock>
`;

exports[`EmbedBlock renders 1`] = `
<MediaBlock
  block={
    Immutable.Record {
      "key": "",
      "type": "unstyled",
      "text": "",
      "characterList": Immutable.List [],
      "depth": 0,
      "data": Immutable.Map {},
    }
  }
  blockProps={
    Object {
      "editorState": EditorState {
        "_immutable": Immutable.Record {
          "allowUndo": true,
          "currentContent": Immutable.Record {
            "entityMap": Object {
              "__add": [Function],
              "__create": [Function],
              "__get": [Function],
              "__getLastCreatedEntityKey": [Function],
              "__mergeData": [Function],
              "__replaceData": [Function],
              "add": [Function],
              "create": [Function],
              "get": [Function],
              "getLastCreatedEntityKey": [Function],
              "mergeData": [Function],
              "replaceData": [Function],
            },
            "blockMap": Immutable.OrderedMap {
              "cvvlm": Immutable.Record {
                "key": "cvvlm",
                "type": "unstyled",
                "text": "",
                "characterList": Immutable.List [],
                "depth": 0,
                "data": Immutable.Map {},
              },
            },
            "selectionBefore": Immutable.Record {
              "anchorKey": "cvvlm",
              "anchorOffset": 0,
              "focusKey": "cvvlm",
              "focusOffset": 0,
              "isBackward": false,
              "hasFocus": false,
            },
            "selectionAfter": Immutable.Record {
              "anchorKey": "cvvlm",
              "anchorOffset": 0,
              "focusKey": "cvvlm",
              "focusOffset": 0,
              "isBackward": false,
              "hasFocus": false,
            },
          },
          "decorator": null,
          "directionMap": Immutable.OrderedMap {
            "cvvlm": "LTR",
          },
          "forceSelection": false,
          "inCompositionMode": false,
          "inlineStyleOverride": null,
          "lastChangeType": null,
          "nativelyRenderedContent": null,
          "redoStack": Immutable.Stack [],
          "selection": Immutable.Record {
            "anchorKey": "cvvlm",
            "anchorOffset": 0,
            "focusKey": "cvvlm",
            "focusOffset": 0,
            "isBackward": false,
            "hasFocus": false,
          },
          "treeMap": Immutable.OrderedMap {
            "cvvlm": Immutable.List [
              Immutable.Record {
                "start": 0,
                "end": 0,
                "decoratorKey": null,
                "leaves": Immutable.List [
                  Immutable.Record {
                    "start": 0,
                    "end": 0,
                  },
                ],
              },
            ],
          },
          "undoStack": Immutable.Stack [],
        },
      },
      "entity": Object {
        "getData": [Function],
        "getMutability": [Function],
        "getType": [Function],
      },
      "entityKey": "string",
      "entityType": Object {
        "description": "test",
        "icon": "test",
      },
      "lockEditor": [Function],
      "onChange": [Function],
      "onEditEntity": [Function],
      "onRemoveEntity": [Function],
      "textDirectionality": "RTL",
      "unlockEditor": [Function],
    }
  }
  isLoading={false}
  label="Test title"
  src="http://www.example.com/example.png"
>
  <a
    className="EmbedBlock__link"
    href="http://www.example.com/"
    rel="noopener noreferrer"
    target="_blank"
    title="http://www.example.com/"
  >
    Test title
  </a>
  <button
    className="Tooltip__button"
    onClick={[Function]}
    type="button"
  >
    Edit
  </button>
  <button
    className="Tooltip__button"
    onClick={[Function]}
    type="button"
  >
    Remove
  </button>
</MediaBlock>
`;
